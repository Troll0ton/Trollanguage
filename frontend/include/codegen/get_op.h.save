
//{----------------------------------------------------------------------------
//!                       SPECIAL GRAMMAR PROCESSING
//!                             (IN FRONTEND)
//}----------------------------------------------------------------------------

HANDLE_OP("=", O(ASG),
{
    Node *new_node = NULL;
    Node *left_node = get_str (grammar);

    (*grammar) += O(ASG);

    Node *right_node = get_expression (grammar);

    CHECK_EXPRESSION (**grammar == '\0', "END OF EXPRESSION\n");

    INIT (new_node, ASG, 0);

    return new_node;
})

HANDLE_OP("while", O(WHILE),
{
    Node *new_node = NULL;

    (*grammar) += O(WHILE);

    Node *left_node  = get_brackets (grammar);
    Node *right_node = get_body (grammar, info);

    INIT (new_node, WHILE, 0);

    return new_node;
})

HANDLE_OP("funct", O(FUNCT),
{
    Node *new_node = NULL;

    (*grammar) += O(FUNCT);

    (*grammar)++;

    Node *funct_name = get_str (grammar);

    info->curr_line++;

    Node *funct_body = NULL;
    Node *left_node  = NULL;
    Node *right_node = get_sequence (info);

    INIT (funct_body, BODY, 0);

    left_node  = funct_name;
    right_node = funct_body;

    INIT (new_node, FUNCT, 0);

    return new_node;
})

HANDLE_OP("if", O(IF),
{
    Node *new_node = NULL;

    (*grammar) += O(IF);

    Node *condition = get_brackets (grammar);

    Node *if_body    = NULL;
    Node *left_node  = get_body (grammar, info);
    Node *right_node = NULL;

    info->curr_line++;
    
    char **curr_line = &CURR_LINE;

    if(!strncmp (*curr_line, "else", O(ELSE)))
    {
        (*curr_line) += O(ELSE);

        right_node = get_body (curr_line, info);
    }

    else
    {
        info->curr_line--;

        right_node = NULL;
    }

    INIT (if_body, BODY, 0);

    right_node





    INIT (new_node, IF, 0);

    return new_node;
})

//-----------------------------------------------------------------------------
